#include <wiringPi.h>
#include <errno.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <lirc/lirc_client.h>
#include <time.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/wait.h>
#include <stdio.h>
#include <signal.h>
#include <unistd.h>
#include <sys/reboot.h>
#include <stdbool.h>

#include "motion.h"
#include  "mailalarm.h"
#include "log.h"
#include "leds.h"

static volatile int globalCounter = 0;

void alarmInterrupt()
{
  ++globalCounter;
  printf("Raspberry motion detected! \n");
};

int main(int argc, char **argv)
{
  printf("Raspberry Pi alarm \n");
  logger(INFO, "Raspberry Pi alarm");
  int status = 1;

  bool detection = false;
  bool lastDetection = false;
  uint emailCounter = 0;

  delay(60 *2000);

// Use  wiringPi pin 
  if (wiringPiSetup() == -1)
    exit(1);



  pinMode(DHTPIN, INPUT);

  blinkInit();
  led1blink();


 
  //gpio edge 29 falling gpio edge 29 rising


  // pinMode(DHTPIN, INPUT);

// http://wiringpi.com/reference/priority-interrupts-and-threads/
//https://projects.drogon.net/raspberry-pi/wiringpi/functions/
// https://github.com/WiringPi/WiringPi/blob/master/examples/isr.c

  // wiringPiISR (DHTPIN, INT_EDGE_RISING,  &alarmx);

  // for (;;) {   }


  lastDetection = motion_detect();

  if (lastDetection == true)
  {
    led1ON();
  }


  while (true)
  {
    detection = motion_detect();

    if ((detection == true) && (lastDetection == false))
    {
      led1ON();
      logger(INFO, "Motion detect!");
      logger(INFO, "Sending email!");
      sendmail();
      emailCounter++;
      delay(20000);
      lastDetection = detection;

    }

    if ((detection == false) && (lastDetection == true))
    {
      lastDetection = false;
      led1OFF();
    }


    if (emailCounter > 20)
    {
      break;
    }
    delay(2000);
  }

  return (status);

}
